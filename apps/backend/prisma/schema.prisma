// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum for user types
enum UserType {
  TALENT
  AGENT
  CLUB
}

// Base user model (connects with Firebase Auth)
model User {
  id                String    @id // Firebase UID
  email            String    @unique
  userType         UserType?
  registrationStatus String   // e.g., "PENDING", "COMPLETE", "VERIFIED"
  
  // Basic Info (stored before user type selection)
  fullName         String?
  dateOfBirth      DateTime?
  nationality      String?
  phone            String?
  bio              String?   @db.Text
  address          Json?     // Structured JSON for address details
  
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  talent           Talent?
  agent            Agent?
  club             Club?
}

// Talent/Player Profile
model Talent {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id])
  
  // Basic Info
  fullName        String
  dateOfBirth     DateTime
  nationality     String
  languages       String[]  // Array of languages spoken
  currentLocation String?   // Current city/country
  bio             String?   @db.Text
  nickname        String?   // Player nickname
  coverPhoto      String?   // URL to cover photo

  // Player Specifics
  positions       String[]  // Array of positions
  primaryPosition String?   // Main position
  secondaryPositions String[] // Secondary positions
  currentClub     String?
  previousClubs   String[]  // Array of previous clubs
  height          Float?    // in cm
  weight          Float?    // in kg
  preferredFoot   String?
  fitnessLevel    Int?      // 0-100 scale
  playingStyle    String[]  // Array of playing styles

  // Availability
  isAvailableForTrials Boolean @default(false)
  preferredRegions     String[] // Array of preferred regions
  willingToRelocate    Boolean @default(false)

  // Experience
  playingHistory  Json?     // Structured JSON for history
  achievements    Json?     // Structured JSON for achievements

  // Media
  profilePhoto    String?   // URL to photo
  mediaLinks      Json?     // URLs to media (for future)

  // Social Links
  socialLinks     Json?     // Structured JSON for social media links

  // Privacy Settings
  profileVisibility String?  @default("public") // public, scout-only, private
  showContactInfo   Boolean  @default(true)
  showLocation      Boolean  @default(true)
  showAchievements  Boolean  @default(true)
  showMedia         Boolean  @default(true)

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// Agent Profile
model Agent {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id])

  // Basic Info
  fullName        String
  companyName     String?
  licenseNumber   String?   @unique

  // Professional Details
  yearsExperience Int?
  operationAreas  String[]  // Array of areas
  languages       String[]  // Array of languages

  // Verification
  licenseDoc      String?   // URL to license document
  references      Json?     // Structured JSON for references
  businessRegDoc  String?   // URL to business registration

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// Club Profile
model Club {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id])

  // Basic Info
  clubName        String
  location        String
  league          String
  country         String

  // Official Details
  registrationNumber String? @unique
  yearFounded     Int?
  website         String?

  // Representative Info
  contactName     String
  position        String
  contactDetails  Json      // Structured JSON for contact details

  // Verification
  officialDocs    String?   // URL to official documents
  leagueAffiliation String? // URL to league affiliation proof

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
} 